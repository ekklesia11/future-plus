"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FuturePlusStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const lambda = require("aws-cdk-lib/aws-lambda");
const apigw = require("aws-cdk-lib/aws-apigateway");
const rds = require("aws-cdk-lib/aws-rds");
const ec2 = require("aws-cdk-lib/aws-ec2");
const ecs = require("aws-cdk-lib/aws-ecs");
const ecsPatterns = require("aws-cdk-lib/aws-ecs-patterns");
const secretManager = require("aws-cdk-lib/aws-secretsmanager");
const route53 = require("aws-cdk-lib/aws-route53");
const certificateManager = require("aws-cdk-lib/aws-certificatemanager");
;
class FuturePlusStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const vpc = new ec2.Vpc(this, 'main-VPC');
        const hostedZone = route53.PublicHostedZone.fromHostedZoneAttributes(this, 'HostedZone', {
            hostedZoneId: props.hostedZoneId,
            zoneName: props.hostedZoneName,
        });
        const hasuraCertificate = new certificateManager.DnsValidatedCertificate(this, 'HasuraCertificate', {
            hostedZone,
            domainName: props.hasuraHostname,
        });
        const restApiCertificate = new certificateManager.DnsValidatedCertificate(this, 'ActionsCertificate', {
            hostedZone,
            domainName: props.apiHostname,
        });
        const database = new rds.DatabaseInstance(this, 'Database', {
            engine: rds.DatabaseInstanceEngine.POSTGRES,
            vpc,
            databaseName: 'futurePlus',
            instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MICRO),
            removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
            storageEncrypted: true,
            allocatedStorage: 20,
            maxAllocatedStorage: 100,
        });
        const databaseUserSecret = new rds.DatabaseSecret(this, 'DatabaseUser', {
            username: 'admin',
            masterSecret: database.secret,
        });
        databaseUserSecret.attach(database);
        const hasuraDatabaseUrlSecret = new secretManager.Secret(this, 'HasuraDatabaseUrlSecret', {
            secretName: `${props.appName}-HasuraDatabaseUrl`,
            secretStringBeta1: secretManager.SecretStringValueBeta1.fromUnsafePlaintext(database.dbInstanceEndpointAddress),
        });
        const hasuraAdminSecret = new secretManager.Secret(this, 'HasuraAdminSecret', {
            secretName: `${props.appName}-HasuraAdminSecret`,
            secretStringBeta1: secretManager.SecretStringValueBeta1.fromUnsafePlaintext(props.hasuraAdminSecret),
        });
        const hasuraJwtSecret = new secretManager.Secret(this, 'HasuraJwtSecret', {
            secretName: `${props.appName}-HasuraJWTSecret`,
            generateSecretString: {
                includeSpace: false,
                passwordLength: 32,
                excludePunctuation: true
            }
        });
        new aws_cdk_lib_1.CfnOutput(this, 'HasuraDatabase', {
            description: 'DB info',
            value: database.dbInstanceEndpointAddress,
        });
        new aws_cdk_lib_1.CfnOutput(this, 'HasuraDatabaseUserSecretArn', {
            value: databaseUserSecret.secretArn,
        });
        new aws_cdk_lib_1.CfnOutput(this, 'HasuraDatabaseMasterSecretArn', {
            value: database.secret.secretArn,
        });
        new aws_cdk_lib_1.CfnOutput(this, 'HasuraDatabaseUrlSecretArn', {
            value: hasuraDatabaseUrlSecret.secretArn,
        });
        new aws_cdk_lib_1.CfnOutput(this, 'HasuraAdminSecretArn', {
            value: hasuraAdminSecret.secretArn,
        });
        const fargate = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'FargateService', {
            vpc,
            memoryLimitMiB: 512,
            cpu: 256,
            taskImageOptions: {
                image: ecs.ContainerImage.fromRegistry('hasura/graphql-engine:latest'),
                containerPort: 8080,
                enableLogging: true,
                environment: {
                    HASURA_GRAPHQL_ENABLE_CONSOLE: 'true',
                    HASURA_GRAPHQL_PG_CONNECTIONS: '100',
                    HASURA_GRAPHQL_LOG_LEVEL: 'debug',
                    HASURA_GRAPHQL_JWT_SECRET: `{"type": "HS256", "key": "${hasuraJwtSecret.secretValue.toString()}"}`,
                },
                secrets: {
                    HASURA_GRAPHQL_DATABASE_URL: ecs.Secret.fromSecretsManager(hasuraDatabaseUrlSecret),
                    HASURA_GRAPHQL_ADMIN_SECRET: ecs.Secret.fromSecretsManager(hasuraAdminSecret),
                },
            },
            publicLoadBalancer: true,
            certificate: hasuraCertificate,
            domainName: props.hasuraHostname,
            domainZone: hostedZone,
            assignPublicIp: true,
        });
        fargate.targetGroup.configureHealthCheck({
            enabled: true,
            path: '/check-health',
            healthyHttpCodes: '200',
        });
        database.connections.allowFrom(fargate.service, new ec2.Port({
            protocol: ec2.Protocol.TCP,
            stringRepresentation: 'Postgres Port',
            fromPort: 5432,
            toPort: 5432,
        }));
        // defines an AWS Lambda resource
        const createProgram = new lambda.Function(this, 'createProgramHandler', {
            runtime: lambda.Runtime.NODEJS_14_X,
            code: lambda.Code.fromAsset('lambda'),
            handler: 'createProgram.handler',
        });
        // defines an API Gateway REST API resource backed by our "hello" function.
        new apigw.LambdaRestApi(this, 'Endpoint', {
            handler: createProgram
        });
    }
}
exports.FuturePlusStack = FuturePlusStack;
//# sourceMappingURL=data:application/json;base64,